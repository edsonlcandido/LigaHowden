@page "/"
@using System.Security.Claims

<PageTitle>Liga Howden HSA</PageTitle>

<h1>Times participantes</h1>
<p>Ordenados pela pontuação</p>
<div>
    <div class="card mb-3 py-3 px-2">
        <div class="row">
            <div class="col-2 align-content-center">
                <p class="m-0">
                    img time
                </p>                
            </div>
            <div class="col">
                <h5 class="card-title">Nome do time</h5>
                <p class="card-text">Cartola</p>
            </div>
            <div class="col-3 align-content-center text-center">
                <p class="fw-bold m-0 text-success">
                    00.0
                </p>
            </div>
        </div>
    </div>
</div>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState)?.User;
        if (user != null)
        {
            var name = user.Identity?.Name;
            var email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        }       

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
        }
        string url = "https://api.cartola.globo.com/busca?q=C.R.%20HRoMeU";
        using (HttpClient client = new HttpClient())
        {
            try
            {
                HttpResponseMessage response = await client.GetAsync(url);
                response.EnsureSuccessStatusCode(); // Lança uma exceção se o código de status não for bem-sucedido (200-299)
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseBody);
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine("\nException Caught!");
                Console.WriteLine("Message :{0} ", e.Message);
            }
        }

    }

}
