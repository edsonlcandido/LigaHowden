@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authStateProvider
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JSRuntime
@inject AuthService authService

@using LigaHowden.Requests.ApiRequests
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PocketBaseClient
@using System.Text.Json
@using System.Text.Json.Serialization
@using pocketbase_csharp_sdk
@using System.Collections.Generic
@using LigaHowden.Services

<h1>Login</h1>
<form>
  <!-- Email input -->
  <div data-mdb-input-init class="form-outline mb-4">
    <input type="email" id="form2Example1" class="form-control" @bind="identity"/>
    <label class="form-label" for="form2Example1">Email address</label>
  </div>

  <!-- Password input -->
  <div data-mdb-input-init class="form-outline mb-4">
    <input type="password" id="form2Example2" class="form-control" @bind="password"/>
    <label class="form-label" for="form2Example2">Password</label>
  </div>

  <!-- Submit button -->
    <button type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-block mb-4" @onclick="SignIn">Login</button>

</form>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    //ao clickar no botão enviar os valores identity e password para a user https://api.ligas.edsonluizcandido.com.br//api/collections/users/auth-with-password usando o post
    //show a modal value 
    private string identity ="";
    private string password ="";


    private async Task SignIn()
    {
        //var pb = new PocketBase("https://api.ligas.edsonluizcandido.com.br");

        //var authData = await pb.User.AuthenticateWithPassword(this.identity, this.password);
        LoginRequest loginRequest = new LoginRequest
        {
            Identity = this.identity,
            Password = this.password
        };

        //var response = await Http.PostAsJsonAsync("/api/collections/users/auth-with-password", loginRequest);
        var loginResponse = await authService.Login(loginRequest);

        if (loginResponse.Token != "")
        {
            // var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>(new JsonSerializerOptions
            // {
            //     PropertyNameCaseInsensitive = true
            // });
            //var authResponse = JsonSerializer.Deserialize<AuthResponse>();
            var customAuthProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthProvider.UpdateAuthenticationState(new UserSession()
            {
                    Id = loginResponse.User.Id,
                    Token = loginResponse.Token,
                    UserName = loginResponse.User.Username,
                    Name = loginResponse.User.Name,
                    Role = "user",
                    Leagues = loginResponse.User.Leagues
            });

            await sessionStorage.SetAsync("apiToken", loginResponse.Token);
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(loginResponse.Token);

            // Aqui você pode redirecionar o usuário para outra página ou mostrar uma mensagem de sucesso
            Navigation.NavigateTo("/",true);
        }
        else
        {
            // Mostrar uma mensagem de erro
            Navigation.NavigateTo("/login", true);
        }
    }
}