@page "/leagues/add"
@inject NavigationManager Navigation
@inject LeagueService leaguesService
@inject AuthenticationStateProvider authStateProvider
@inject ProtectedSessionStorage sessionStorage
@using LigaHowden.Data
@using LigaHowden.Requests;
@using LigaHowden.Requests.ApiRequests
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

<div class="row mt-4">
    <div class="d-flex align-items-center">
        <h1>Ligas</h1> - <h2>Adicionar</h2>
    </div>
</div>
<div class="row">
    <EditForm Model="@this" OnValidSubmit="CreateLeague">
        <div class="mb-3">
            <label for="InputName" class="form-label">Nome da Liga</label>
            <input type="text" class="form-control" id="InputName" @bind="Nome">
        </div>
        <button type="submit" class="btn btn-primary">Criar</button>
    </EditForm>
</div>


@code {
    public string? Nome { get; set; }

    private async Task CreateLeague()
    {
        try
        {
            var customAuthProvider = (CustomAuthenticationStateProvider)authStateProvider;
            var token = await sessionStorage.GetAsync<string>("apiToken");
            var session = await sessionStorage.GetAsync<UserSession>("UserSession");
            var userId = session.Value.Id;
            
            LeagueCreateRequest leagueCreateRequest = new LeagueCreateRequest
                {
                    Name = this.Nome,
                    Owner = userId
                };
            leagueCreateRequest.Slug = leagueCreateRequest.Name.Slugify();
            var newLeague = await leaguesService.CreateLeague(leagueCreateRequest, token.Value);
            Navigation.NavigateTo("/leagues", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

